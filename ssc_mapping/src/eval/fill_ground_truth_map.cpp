

/////////////////////////////////////////////////////////////////////////
// Note:
// Fills ground truth map generated by voxblox_ground_truth package
// with free space using frontier expansion approach. Also optionally
// saves a new map with an occupancy voxels over the free space.
// Mansoor Cheema - Oct 16, 2021
/////////////////////////////////////////////////////////////////////////

#include "ssc_mapping/eval/map_eval.h"
#include "ssc_mapping/utils/evaluation_utils.h"

int main(int argc, char** argv) {
    ros::init(argc, argv, "ssc_mapping_eval");
    google::InitGoogleLogging(argv[0]);
    google::InstallFailureSignalHandler();
    google::ParseCommandLineFlags(&argc, &argv, false);

    ros::NodeHandle nh("");
    ros::NodeHandle nh_private("~");

    // keep orignal occupied voxels. If false a layer of occupied voxels are
    // overlayed over free space.
    bool keep_occupancy = true;

    // parameters
    std::string input_path="/home/mansoor/flat.tsdf";
    std::string save_path="/home/mansoor/flat_filled_free.tsdf";
    // load params
    nh_private.param("input_path", input_path, input_path);
    nh_private.param("save_path", save_path, save_path);
    nh_private.param("keep_occupancy", keep_occupancy, keep_occupancy);

    voxblox::Layer<voxblox::TsdfVoxel>::Ptr ground_truth_layer, ground_truth_layer_refined;

    voxblox::io::LoadLayer<voxblox::TsdfVoxel>(input_path, &ground_truth_layer);
    ground_truth_layer_refined = std::make_shared<voxblox::Layer<voxblox::TsdfVoxel>>(
        ground_truth_layer->voxel_size(), ground_truth_layer->voxels_per_side());

    // fill the layer with free space voxels. optionally
    // use only one voxel with occupancy overlaying free space
    if (keep_occupancy) {
        fill_gt_layer(ground_truth_layer);
        ground_truth_layer->saveToFile(save_path, true);
    } else {
        refine_gt_layer(*ground_truth_layer, ground_truth_layer_refined);
        // save refined layer
        ground_truth_layer_refined->saveToFile(save_path, true);
    }

    return 0;
}
